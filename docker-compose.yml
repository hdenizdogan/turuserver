services:


  #jellyfin for media streaming
  jellyfin:
    image: jellyfin/jellyfin
    container_name: jellyfin
    restart: always
    ports:
      - "8096:8096"
    environment:
      - BASE_URL=/jellyfin
    devices:
      - /dev/dri:/dev/dri
    volumes:
      - jellyfin_config:/config
      - jellyfin_cache:/cache
      - /mnt/media:/media
      - /opt/jellyfin-fonts:/usr/share/fonts/truetype/jellyfin-fonts:ro
    env_file:
      - .env
  # prowlarr for indexer management
  prowlarr:
    image: lscr.io/linuxserver/prowlarr:latest
    container_name: prowlarr
    restart: unless-stopped
    ports:
      - "9696:9696"
    environment:
      - BASE_URL=/prowlarr
    env_file:
      - .env
    volumes:
      - /mnt/docker/prowlarr:/config

  # sonarr for TV series automation
  sonarr:
    image: lscr.io/linuxserver/sonarr:latest
    container_name: sonarr
    restart: unless-stopped
    ports:
      - "8989:8989"
    environment:
      - BASE_URL=/sonarr
    env_file:
      - .env
    volumes:
      - /mnt/docker/sonarr:/config
      - /mnt/media:/media
      - /mnt/media:/downloads

  # radarr for movie automation
  radarr:
    image: lscr.io/linuxserver/radarr:latest
    container_name: radarr
    restart: unless-stopped
    ports:
      - "7878:7878"
    environment:
      - BASE_URL=/radarr
    env_file:
      - .env
    volumes:
      - /mnt/docker/radarr:/config
      - /mnt/media:/media
      - /mnt/media:/downloads

  # lidarr for music automation
  lidarr:
    image: lscr.io/linuxserver/lidarr:latest
    container_name: lidarr
    restart: unless-stopped
    ports:
      - "8686:8686"
    environment:
      - BASE_URL=/lidarr
    env_file:
      - .env
    volumes:
      - /mnt/docker/lidarr:/config
      - /mnt/media:/media
      - /mnt/media:/downloads

  # homarr for dashboard
  homarr:
    image: ghcr.io/ajnart/homarr:latest
    container_name: homarr
    restart: unless-stopped
    ports:
      - "7575:7575"
    environment:
      - BASE_URL=/homarr
    env_file:
      - .env
    volumes:
      - /mnt/docker/homarr/configs:/app/data/configs
      - /mnt/docker/homarr/icons:/app/public/icons
      - /mnt/docker/homarr/data:/data

  #browser based qbittorrent
  qbittorrent:
    image: lscr.io/linuxserver/qbittorrent:latest
    container_name: qbittorrent
    restart: unless-stopped
    ports:
      - "8080:8080"
      - "6881:6881"
      - "6881:6881/udp"
    environment:
      - BASE_URL=/qbittorrent
    env_file:
      - .env
    volumes:
      - /mnt/media:/media
      - /mnt/media:/downloads
      - /mnt/docker/qbittorrent/config:/config

  #jellyseerr for content requests
  jellyseerr:
    image: fallenbagel/jellyseerr:latest
    container_name: jellyseerr
    restart: unless-stopped
    depends_on:
      - jellyfin
    ports:
      - "5055:5055"
    env_file:
      - .env
    volumes:
      - /mnt/docker/jellyseer/config:/app/config

  #portainer for container controls
  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    restart: unless-stopped
    ports:
      - "9000:9000"
    environment:
      - BASE_URL=/portainer
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data

  agent:
    image: portainer/agent:latest
    container_name: portainer_agent
    restart: always
    ports:
      - "9001:9001"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
      - /:/host
    networks:
      - portainer_net

  #nginx for reverse proxy and subpath creation for all projects
  nginx:
    image: nginx:alpine
    container_name: nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    restart: unless-stopped
    depends_on:
      - jellyfin
      - qbittorrent
      - jellyseerr
      - portainer
      - prowlarr
      - sonarr
      - radarr
      - lidarr
      - homarr
    ports:
      - "80:80"
    extra_hosts:
      - "host.docker.internal:host-gateway"

  #tailscale for free public/private internet access with https
  tailscale:
    image: tailscale/tailscale
    container_name: tailscale
    hostname: turuserver
    network_mode: host
    cap_add:
      - NET_ADMIN
      - NET_RAW
    volumes:
      - /dev/net/tun:/dev/net/tun
      - ./tailscale-data:/var/lib/tailscale
    env_file:
      - .env
    depends_on:
      - nginx
    command: >
      sh -c "
        tailscaled & sleep 2 &&
        tailscale up --auth-key=$TSFUNNEL_AUTHKEY --hostname=turuserver &&
        tailscale funnel --https=443 --set-path=/ 127.0.0.1:80
      "
    restart: unless-stopped

networks:
  portainer_net:

volumes:
  portainer_data:
  jellyfin_config:
  jellyfin_cache:
