services:
  jellyfin:
    image: jellyfin/jellyfin
    container_name: jellyfin
    restart: unless-stopped
    labels:
      tsdproxy.enable: "true"
      tsdproxy.name: "jellyfin"
      tsdproxy.funnel: "true"
      tsdproxy.container_port: 8096
    ports:
      - "8096:8096"
    devices:
      - /dev/dri:/dev/dri
    volumes:
      - /mnt/docker/jellyfin_config:/config
      - /mnt/docker/jellyfin_cache:/cache
      - /mnt/media:/media
      - /opt/jellyfin-fonts:/usr/share/fonts/truetype/jellyfin-fonts:ro
    environment:
      - TZ=${TZ}
    networks:
      - app_net

  jellystat-db:
    image: 'postgres:15.2'
    shm_size: 1gb
    container_name: jellystat-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: $JELLYSTATDB_POSTGRES_USER
      POSTGRES_PASSWORD: $JELLYSTATDB_POSTGRES_PASSWORD
    volumes:
      - /mnt/docker/jellystat-db/postgres-data:/var/lib/postgresql/data
    networks:
      - app_net

  jellystat:
    image: 'cyfershepard/jellystat:latest'
    container_name: jellystat
    restart: unless-stopped
    environment:
      POSTGRES_USER: $JELLYSTATDB_POSTGRES_USER
      POSTGRES_PASSWORD: $JELLYSTATDB_POSTGRES_PASSWORD
      POSTGRES_IP: $JELLYSTATDB_POSTGRES_IP
      POSTGRES_PORT: $JELLYSTATDB_POSTGRES_PORT
      JWT_SECRET: $JELLYSTAT_JWT_SECRET
      TZ: $TZ
    volumes:
      - /mnt/docker/jellystat-backup-data:/app/backend/backup-data
    ports:
      - '3000:3000'
    depends_on:
      - jellystat-db
    networks:
      - app_net
  wizarr:
    container_name: wizarr
    image: ghcr.io/wizarrrr/wizarr
    restart: unless-stopped
    ports:
      - '5690:5690'
    labels:
      tsdproxy.enable: "true"
      tsdproxy.name: "wizarr"
      tsdproxy.funnel: "true"
      tsdproxy.container_port: 5690
    volumes:
      - /mnt/docker/wizarr:/data
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - DISABLE_BUILTIN_AUTH=false #Set to true ONLY if you are using another auth provider (Authelia, Authentik, etc)
    networks:
      - app_net

#  homarr:
#    container_name: homarr
#    image: ghcr.io/homarr-labs/homarr:latest
#    restart: unless-stopped
#    labels:
#      tsdproxy.enable: "true"
#      tsdproxy.name: "homarr"
#      tsdproxy.funnel: "true"
#      tsdproxy.ephemeral: "true"
#      tsdproxy.container_port: 7575
#    volumes:
#      - /var/run/docker.sock:/var/run/docker.sock
#      - /var/lib/docker/volumes:/var/lib/docker/volumes
#      - /mnt/docker/homarr/appdata:/appdata
#    environment:
#      - PUID=$PUID
#      - PGID=111
#      - SECRET_ENCRYPTION_KEY=$SECRET_ENCRYPTION_KEY
#    ports:
#      - '7575:7575'
#    networks:
#      - app_net

  prowlarr:
    image: lscr.io/linuxserver/prowlarr:latest
    container_name: prowlarr
    restart: unless-stopped
    labels:
      tsdproxy.enable: "true"
      tsdproxy.name: "prowlarr"
      tsdproxy.funnel: "true"
      tsdproxy.container_port: 9696
    ports:
      - "9696:9696"
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - /mnt/docker/prowlarr:/config
      - /mnt/media/torrent:/mnt/media/torrent
      - /mnt/media/torrent:/downloads
    networks:
      - app_net

  sonarr:
    image: lscr.io/linuxserver/sonarr:latest
    container_name: sonarr
    restart: unless-stopped
    labels:
      tsdproxy.enable: "true"
      tsdproxy.name: "sonarr"
      tsdproxy.funnel: "true"
      tsdproxy.container_port: 8989
    ports:
      - "8989:8989"
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - /mnt/docker/sonarr:/config
      - /mnt/media/torrent:/mnt/media/torrent
      - /mnt/media/torrent:/downloads
    networks:
      - app_net

  radarr:
    image: lscr.io/linuxserver/radarr:latest
    container_name: radarr
    restart: unless-stopped
    labels:
      tsdproxy.enable: "true"
      tsdproxy.name: "radarr"
      tsdproxy.funnel: "true"
      tsdproxy.container_port: 7878
    ports:
      - "7878:7878"
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - /mnt/docker/radarr:/config
      - /mnt/media/torrent:/mnt/media/torrent
      - /mnt/media/torrent:/downloads
    networks:
      - app_net

  bazarr:
    image: lscr.io/linuxserver/bazarr:latest
    container_name: bazarr
    restart: unless-stopped
    ports:
      - "6767:6767"
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - /mnt/media:/mnt/media
      - /mnt/docker/bazarr:/config
    networks:
      - app_net

  flaresolverr:
    image: flaresolverr/flaresolverr:latest
    container_name: flaresolverr
    restart: unless-stopped
    environment:
      - LOG_LEVEL=info
      - CAPTCHA_SOLVER=none
    ports:
      - "8191:8191"
    networks:
      - app_net

  qbittorrent:
    image: lscr.io/linuxserver/qbittorrent:latest
    container_name: qbittorrent
    restart: unless-stopped
    labels:
      tsdproxy.enable: "true"
      tsdproxy.name: "qbittorrent"
      tsdproxy.funnel: "true"
      tsdproxy.container_port: 8090
    ports:
      - "8090:8090"
      - "6881:6881"
      - "6881:6881/udp"
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - WEBUI_PORT=8090
      - TZ=${TZ}
    volumes:
      - /mnt/media:/mnt/media
      - /mnt/media/torrent:/downloads
      - /mnt/docker/qbittorrent/config:/config
    networks:
      - app_net

  unmanic:
    image: josh5/unmanic:latest
    container_name: unmanic
    restart: unless-stopped
    labels:
      tsdproxy.enable: "true"
      tsdproxy.name: "unmanic"
      tsdproxy.funnel: "true"
      tsdproxy.container_port: 8888
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - /mnt/docker/unmanic:/config
      - /mnt/media/torrent:/library
      - /tmp/unmanic:/tmp/unmanic
    ports:
      - "8888:8888"
    devices:
      - /dev/dri:/dev/dri
    networks:
      - app_net

  jellyseerr:
    image: fallenbagel/jellyseerr:latest
    container_name: jellyseerr
    restart: unless-stopped
    labels:
      tsdproxy.enable: "true"
      tsdproxy.name: "jellyseerr"
      tsdproxy.funnel: "true"
      tsdproxy.container_port: 5055
    ports:
      - "5055:5055"
    environment:
      - LOG_LEVEL=info
      - TZ=${TZ}
    volumes:
      - /mnt/docker/jellyseer/config:/app/config
      - /mnt/media:/mnt/media
    networks:
      - app_net


#  stirling-pdf:
#    image: docker.stirlingpdf.com/stirlingtools/stirling-pdf:latest
#    container_name: stirling
#    restart: unless-stopped
#    labels:
#      tsdproxy.enable: "true"
#      tsdproxy.name: "pdf"
#      tsdproxy.funnel: "true"
#      tsdproxy.ephemeral: "true"
#      tsdproxy.container_port: 8080
#    ports:
#      - "5050:8080"
#    volumes:
#      - /mnt/docker/StirlingPDF/trainingData:/usr/share/tessdata
#      - /mnt/docker/StirlingPDF/extraConfigs:/configs
#      - /mnt/docker/StirlingPDF/customFiles:/customFiles/
#      - /mnt/docker/StirlingPDF/logs:/logs/
#      - /mnt/docker/StirlingPDF/pipeline:/pipeline/
#    environment:
#      - DOCKER_ENABLE_SECURITY=false
#      - LANGS=["tr_TR"]
#    networks:
#      - app_net

  metube:
    image: ghcr.io/alexta69/metube
    container_name: metube
    restart: unless-stopped
    labels:
      tsdproxy.enable: "true"
      tsdproxy.name: "metube"
      tsdproxy.funnel: "true"
      tsdproxy.ephemeral: "true"
      tsdproxy.container_port: 8081
    ports:
      - "8999:8081"
    volumes:
      - /tmp/metube:/app/downloads
    networks:
      - app_net

  dash:
    image: mauricenino/dashdot:latest
    container_name: dash
    restart: unless-stopped
    privileged: true
    labels:
      tsdproxy.enable: "true"
      tsdproxy.name: "dash"
      tsdproxy.funnel: "true"
      tsdproxy.ephemeral: "true"
      tsdproxy.container_port: 3001
    ports:
      - "3001:3001"
    environment:
      - DASHDOT_ENABLE_CPU_TEMPERATURE=true
      - DASHDOT_ALWAYS_SHOW_PERCENTAGES=true
      - DASHDOT_ACCEPT_OOKLA_EULA=true
      - DASHDOT_SHOW_HOST=true
    volumes:
      - /:/mnt/host:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - app_net


  filebrowser:
    image: filebrowser/filebrowser:latest
    container_name: filebrowser
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    labels:
      tsdproxy.enable: "true"
      tsdproxy.name: "filebrowser"
      tsdproxy.funnel: "true"
      tsdproxy.container_port: 80
    ports:
      - "3010:80"
    volumes:
      - /mnt/docker/filebrowser_data:/database
      - /mnt/media:/srv
    restart: unless-stopped
    networks:
      - app_net


  portainer:
    image: portainer/portainer-ce:linux-amd64
    container_name: portainer
    restart: unless-stopped
    labels:
      tsdproxy.enable: "true"
      tsdproxy.name: "portainer"
      tsdproxy.funnel: "true"
      tsdproxy.container_port: 9000
    ports:
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /mnt/docker/portainer_data:/data
    networks:
      - app_net

#  adguard:
#    image: adguard/adguardhome:latest
#    container_name: adguard
#    labels:
#      tsdproxy.enable: "true"
#      tsdproxy.name: "adguard"
#      tsdproxy.funnel: "true"
#      tsdproxy.container_port: 80
#    restart: unless-stopped
#    ports:
#      - "8053:53/tcp"     # DNS TCP
#      - "8053:53/udp"     # DNS UDP
#      - "3002:3000"       # initialization
#      - "3005:80"         # HTTP UI
#      - "8443:443"        # HTTPS UI + DoH
#      - "8853:853"        # DNS-over-TLS
#    volumes:
#      - /mnt/docker/adguardhome/work:/opt/adguardhome/work
#      - /mnt/docker/adguardhome/conf:/opt/adguardhome/conf
#      - /mnt/docker/tsdproxydata/default/adguard/certs:/certs:ro
#    networks:
#      - app_net


  nginx:
    image: nginx:alpine
    extra_hosts:
      - "host.docker.internal:host-gateway"
    container_name: nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    restart: unless-stopped
    ports:
      - "80:80"
    networks:
      app_net:
        ipv4_address: 172.18.0.200

  npm:
    image: jc21/nginx-proxy-manager:latest
    container_name: nginx_proxy_manager
    restart: unless-stopped
    ports:
      - "81:81"      # Web UI
      - "443:443"    # HTTPS
      - "8080:80"    # HTTP
    environment:
      DB_SQLITE_FILE: "/data/database.sqlite"
      DISABLE_IPV6: 'true'
    volumes:
      - /mnt/docker/npm/data:/data
      - /mnt/docker/npm/letsencrypt:/etc/letsencrypt
      - /mnt/docker/tsdproxydata/default:/custom-ssl:ro
    networks:
      - app_net

  watchtower:
    image: containrrr/watchtower
    restart: unless-stopped
    container_name: watchtower
    environment:
      - TZ=${TZ}
      - WATCHTOWER_NOTIFICATIONS_HOSTNAME=$HOSTNAME
      - WATCHTOWER_NOTIFICATION_URL=$WATCHTOWER_NOTIFICATION_URL
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --cleanup --no-startup-message --include-restarting --schedule "0 0 4 * * *"
    networks:
      - app_net

  tsdproxy:
    image: almeidapaulopt/tsdproxy:latest
    container_name: tsdproxy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /mnt/docker/tsdproxydata:/data
    environment:
      - TSDPROXY_AUTHKEY=$TSFUNNEL_AUTHKEY
      - TSDPROXY_HOSTNAME=172.18.0.1
      - DOCKER_HOST=unix:///var/run/docker.sock
    restart: unless-stopped
    networks:
      - app_net

networks:
  app_net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.18.0.0/24
