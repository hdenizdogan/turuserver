services:
  jellyfin:
    image: jellyfin/jellyfin
    container_name: jellyfin
    restart: unless-stopped
    labels:
      tsdproxy.enable: "true"
      tsdproxy.name: "jellyfin"
      tsdproxy.funnel: "true"
      tsdproxy.container_port: 8096
      com.centurylinklabs.watchtower.enable: false
    devices:
      - /dev/dri:/dev/dri
    volumes:
      - /mnt/docker/jellyfin_config:/config
      - /mnt/docker/jellyfin_cache:/cache
      - /mnt/media:/media
      - /opt/jellyfin-fonts:/usr/share/fonts/truetype/jellyfin-fonts:ro
    environment:
      - TZ=${TZ}
    network_mode: host
#    ports:
#      - "8096:8096"

#  meilisearch:
#    image: getmeili/meilisearch:latest
#    container_name: meilisearch
#    restart: unless-stopped
#    ports:
#      - "7700:7700"
#    volumes:
#      - /mnt/docker/meilisearch:/meili_data
#    environment:
#      - MEILI_ENV=development
#      - MEILI_MASTER_KEY=${MEILI_MASTER_KEY}
#    networks:
#      - local_net


  #  jellystat-db:
#    image: 'postgres:15.2'
#    shm_size: 1gb
#    container_name: jellystat-db
#    restart: unless-stopped
#    environment:
#      POSTGRES_USER: $JELLYSTATDB_POSTGRES_USER
#      POSTGRES_PASSWORD: $JELLYSTATDB_POSTGRES_PASSWORD
#    volumes:
#      - /mnt/docker/jellystat-db/postgres-data:/var/lib/postgresql/data


#
#  jellystat:
#    image: 'cyfershepard/jellystat:latest'
#    container_name: jellystat
#    restart: unless-stopped
#    environment:
#      POSTGRES_USER: $JELLYSTATDB_POSTGRES_USER
#      POSTGRES_PASSWORD: $JELLYSTATDB_POSTGRES_PASSWORD
#      POSTGRES_IP: $JELLYSTATDB_POSTGRES_IP
#      POSTGRES_PORT: $JELLYSTATDB_POSTGRES_PORT
#      JWT_SECRET: $JELLYSTAT_JWT_SECRET
#      TZ: $TZ
#    volumes:
#      - /mnt/docker/jellystat-backup-data:/app/backend/backup-data
#    ports:
#      - '3000:3000'
#    depends_on:
#      - jellystat-db


  wizarr:
    container_name: wizarr
    image: ghcr.io/wizarrrr/wizarr
    restart: unless-stopped
    ports:
      - '5690:5690'
    labels:
      tsdproxy.enable: "true"
      tsdproxy.name: "wizarr"
      tsdproxy.funnel: "true"
      tsdproxy.container_port: 5690
    volumes:
      - /mnt/docker/wizarr:/data
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - DISABLE_BUILTIN_AUTH=false #Set to true ONLY if you are using another auth provider (Authelia, Authentik, etc)
    networks:
      - local_net

#  homarr:
#    container_name: homarr
#    image: ghcr.io/homarr-labs/homarr:latest
#    restart: unless-stopped
#    labels:
#      tsdproxy.enable: "true"
#      tsdproxy.name: "homarr"
#      tsdproxy.funnel: "true"
#      tsdproxy.ephemeral: "true"
#      tsdproxy.container_port: 7575
#    volumes:
#      - /var/run/docker.sock:/var/run/docker.sock
#      - /var/lib/docker/volumes:/var/lib/docker/volumes
#      - /mnt/docker/homarr/appdata:/appdata
#    environment:
#      - PUID=$PUID
#      - PGID=111
#      - SECRET_ENCRYPTION_KEY=$SECRET_ENCRYPTION_KEY
#    ports:
#      - '7575:7575'

  lidatube:
    image: thewicklowwolf/lidatube:latest
    container_name: lidatube
    labels:
      tsdproxy.enable: "true"
      tsdproxy.name: "lidatube"
      tsdproxy.funnel: "true"
      tsdproxy.container_port: 5000
    volumes:
      - /mnt/docker/lidatube:/lidatube/config
      - /mnt/media/torrent/Musics:/lidatube/downloads
      - /etc/localtime:/etc/localtime:ro
    ports:
      - "5000:5000"
    restart: unless-stopped
    environment:
      - attempt_lidarr_import=true
    networks:
      - local_net


  prowlarr:
    image: lscr.io/linuxserver/prowlarr:latest
    container_name: prowlarr
    restart: unless-stopped
    labels:
      tsdproxy.enable: "true"
      tsdproxy.name: "prowlarr"
      tsdproxy.funnel: "true"
      tsdproxy.container_port: 9696
    ports:
      - "9696:9696"
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - /mnt/docker/prowlarr:/config
      - /mnt/media/torrent:/mnt/media/torrent
      - /mnt/media/torrent:/downloads
    networks:
      - local_net

  lidarr:
    image: lscr.io/linuxserver/lidarr:latest
    container_name: lidarr
    labels:
      tsdproxy.enable: "true"
      tsdproxy.name: "lidarr"
      tsdproxy.funnel: "true"
      tsdproxy.container_port: 8686
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - /mnt/docker/lidarr:/config
      - /mnt/media/torrent:/mnt/media/torrent
      - /mnt/media/torrent:/downloads
    ports:
      - "8686:8686"
    restart: unless-stopped
    networks:
      - local_net

  sonarr:
    image: lscr.io/linuxserver/sonarr:latest
    container_name: sonarr
    restart: unless-stopped
    labels:
      tsdproxy.enable: "true"
      tsdproxy.name: "sonarr"
      tsdproxy.funnel: "true"
      tsdproxy.container_port: 8989
    ports:
      - "8989:8989"
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - /mnt/docker/sonarr:/config
      - /mnt/media/torrent:/mnt/media/torrent
      - /mnt/media/torrent:/downloads
    networks:
      - local_net

  radarr:
    image: lscr.io/linuxserver/radarr:latest
    container_name: radarr
    restart: unless-stopped
    labels:
      tsdproxy.enable: "true"
      tsdproxy.name: "radarr"
      tsdproxy.funnel: "true"
      tsdproxy.container_port: 7878
    ports:
      - "7878:7878"
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - /mnt/docker/radarr:/config
      - /mnt/media/torrent:/mnt/media/torrent
      - /mnt/media/torrent:/downloads
    networks:
      - local_net

  bazarr:
    image: lscr.io/linuxserver/bazarr:latest
    container_name: bazarr
    restart: unless-stopped
    labels:
      tsdproxy.enable: "true"
      tsdproxy.name: "bazarr"
      tsdproxy.funnel: "true"
      tsdproxy.container_port: 6767
    ports:
      - "6767:6767"
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - /mnt/media:/mnt/media
      - /mnt/docker/bazarr:/config
    networks:
      - local_net

#  profilarr:
#    image: santiagosayshey/profilarr:latest # Use :beta for early access to new features
#    container_name: profilarr
#    labels:
#      tsdproxy.enable: "true"
#      tsdproxy.name: "profilarr"
#      tsdproxy.funnel: "true"
#      tsdproxy.container_port: 6868
#    ports:
#      - "6868:6868"
#    volumes:
#      - /mnt/docker/profilarr:/config
#    environment:
#      - TZ=${TZ}
#    restart: unless-stopped


  flaresolverr:
    image: flaresolverr/flaresolverr:latest
    container_name: flaresolverr
    restart: unless-stopped
    environment:
      - LOG_LEVEL=info
      - CAPTCHA_SOLVER=none
    volumes:
      - /mnt/docker/flaresolverr:/config
    ports:
      - "8191:8191"
    networks:
      - local_net

  qbittorrent:
    image: lscr.io/linuxserver/qbittorrent:latest
    container_name: qbittorrent
    restart: unless-stopped
    labels:
      tsdproxy.enable: "true"
      tsdproxy.name: "qbittorrent"
      tsdproxy.funnel: "true"
      tsdproxy.container_port: 8090
    ports:
      - "8090:8090"
      - "6881:6881"
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - WEBUI_PORT=8090
      - TZ=${TZ}
    volumes:
      - /mnt/media:/mnt/media
      - /mnt/media/torrent:/downloads
      - /mnt/docker/qbittorrent/config:/config
    networks:
      - local_net

  unmanic:
    image: josh5/unmanic:latest
    container_name: unmanic
    restart: unless-stopped
    labels:
      tsdproxy.enable: "true"
      tsdproxy.name: "unmanic"
      tsdproxy.funnel: "true"
      tsdproxy.container_port: 8888
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - /mnt/docker/unmanic:/config
      - /mnt/media/torrent:/library
      - /tmp/unmanic:/tmp/unmanic
    ports:
      - "8888:8888"
    devices:
      - /dev/dri:/dev/dri
    networks:
      - local_net

  jellyseerr:
    image: ghcr.io/fallenbagel/jellyseerr:latest
    container_name: jellyseerr
    restart: unless-stopped
    labels:
      tsdproxy.enable: "true"
      tsdproxy.name: "jellyseerr"
      tsdproxy.funnel: "true"
      tsdproxy.container_port: 5055
    ports:
      - "5055:5055"
    environment:
      - LOG_LEVEL=info
      - TZ=${TZ}
    volumes:
      - /mnt/docker/jellyseer/config:/app/config
      - /mnt/media:/mnt/media
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:5055/api/v1/status || exit 1
      start_period: 20s
      timeout: 3s
      interval: 15s
      retries: 3
    networks:
      - local_net

#  homeassistant:
#    container_name: homeassistant
#    image: "ghcr.io/home-assistant/home-assistant:stable"
#    labels:
#      tsdproxy.enable: "true"
#      tsdproxy.name: "homeassistant"
#      tsdproxy.funnel: "true"
#      tsdproxy.container_port: 8123
#    volumes:
#      - /mnt/docker/homeassistant:/config
#      - /etc/localtime:/etc/localtime:ro
#      - /run/dbus:/run/dbus:ro
#    restart: unless-stopped
#    cap_add:
#      - NET_ADMIN
#      - NET_RAW
#    privileged: true
#    network_mode: host


#  stirling-pdf:
#    image: docker.stirlingpdf.com/stirlingtools/stirling-pdf:latest
#    container_name: stirling
#    restart: unless-stopped
#    labels:
#      tsdproxy.enable: "true"
#      tsdproxy.name: "pdf"
#      tsdproxy.funnel: "true"
#      tsdproxy.ephemeral: "true"
#      tsdproxy.container_port: 5050
#    ports:
#      - "5050:5050"
#    volumes:
#      - /mnt/docker/StirlingPDF/trainingData:/usr/share/tessdata
#      - /mnt/docker/StirlingPDF/extraConfigs:/configs
#      - /mnt/docker/StirlingPDF/customFiles:/customFiles/
#      - /mnt/docker/StirlingPDF/logs:/logs/
#      - /mnt/docker/StirlingPDF/pipeline:/pipeline/
#    environment:
#      - DOCKER_ENABLE_SECURITY=false
#      - LANGS=["tr_TR"]

#  metube:
#    image: ghcr.io/alexta69/metube
#    container_name: metube
#    restart: unless-stopped
#    labels:
#      tsdproxy.enable: "true"
#      tsdproxy.name: "metube"
#      tsdproxy.funnel: "true"
#      tsdproxy.container_port: 8999
#    ports:
#      - "8999:8081"
#    volumes:
#      - /tmp/metube:/downloads


  dash:
    image: mauricenino/dashdot:latest
    container_name: dash
    restart: unless-stopped
    privileged: true
    labels:
      tsdproxy.enable: "true"
      tsdproxy.name: "dash"
      tsdproxy.funnel: "true"
      tsdproxy.ephemeral: "true"
      tsdproxy.container_port: 3001
    ports:
      - "3001:3001"
    environment:
      - DASHDOT_ENABLE_CPU_TEMPERATURE=true
      - DASHDOT_ALWAYS_SHOW_PERCENTAGES=true
      - DASHDOT_ACCEPT_OOKLA_EULA=true
      - DASHDOT_SHOW_HOST=true
    volumes:
      - /:/mnt/host:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - local_net

#  glances:
#    image: nicolargo/glances:latest
#    container_name: glances
#    labels:
#      tsdproxy.enable: "true"
#      tsdproxy.name: "glances"
#      tsdproxy.funnel: "true"
#      tsdproxy.ephemeral: "true"
#      tsdproxy.container_port: 61208
#    restart: unless-stopped
#    pid: host                 # so it can see host processes
#    network_mode: host        # gives accurate network metrics & web access
#    privileged: true          # needed for sensors & iGPU info
#    volumes:
#      - /var/run/docker.sock:/var/run/docker.sock:ro  # show Docker containers
#      - /etc/hostname:/etc/hostname:ro
#      - /etc/os-release:/etc/os-release:ro
#    environment:
#      - GLANCES_OPT=-w      # start in web server mode


#  filebrowser:
#    image: filebrowser/filebrowser:latest
#    container_name: filebrowser
#    environment:
#      - PUID=${PUID}
#      - PGID=${PGID}
#      - TZ=${TZ}
#    labels:
#      tsdproxy.enable: "true"
#      tsdproxy.name: "filebrowser"
#      tsdproxy.funnel: "true"
#      tsdproxy.container_port: 3010
#    ports:
#      - "3010:80"
#    volumes:
#      - /mnt/docker/filebrowser_data:/database
#      - /mnt/media:/srv
#    restart: unless-stopped



  portainer:
    image: portainer/portainer-ce:linux-amd64
    container_name: portainer
    restart: unless-stopped
    labels:
      tsdproxy.enable: "true"
      tsdproxy.name: "portainer"
      tsdproxy.funnel: "true"
      tsdproxy.container_port: 9000
    ports:
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /mnt/docker/portainer_data:/data
    networks:
      - local_net

#  adguard:
#    image: adguard/adguardhome:latest
#    container_name: adguard
#    labels:
#      tsdproxy.enable: "true"
#      tsdproxy.name: "adguard"
#      tsdproxy.funnel: "true"
#      tsdproxy.container_port: 80
#    restart: unless-stopped
#    ports:
#      - "8053:53/tcp"     # DNS TCP
#      - "8053:53/udp"     # DNS UDP
#      - "3002:3000"       # initialization
#      - "3005:80"         # HTTP UI
#      - "8443:443"        # HTTPS UI + DoH
#      - "8853:853"        # DNS-over-TLS
#    volumes:
#      - /mnt/docker/adguardhome/work:/opt/adguardhome/work
#      - /mnt/docker/adguardhome/conf:/opt/adguardhome/conf
#      - /mnt/docker/tsdproxydata/default/adguard/certs:/certs:ro



#  nginx:
#    image: nginx:alpine
#    container_name: nginx
#    volumes:
#      - ./nginx.conf:/etc/nginx/nginx.conf:ro
#    restart: unless-stopped
#    ports:
#      - "80:80"
#    networks:
#      local_net:
#        ipv4_address: 172.19.0.199

  npm:
    image: jc21/nginx-proxy-manager:latest
    container_name: nginx_proxy_manager
    restart: unless-stopped
    ports:
      - "81:81"      # Web UI
      - "443:443"    # HTTPS
      - "8080:80"    # HTTP
    environment:
      DB_SQLITE_FILE: "/data/database.sqlite"
      DISABLE_IPV6: 'true'
    volumes:
      - /mnt/docker/npm/data:/data
      - /mnt/docker/npm/letsencrypt:/etc/letsencrypt
    networks:
      local_net:
        ipv4_address: 172.19.0.200

  watchtower:
    image: containrrr/watchtower
    restart: unless-stopped
    container_name: watchtower
    environment:
      - TZ=${TZ}
      - WATCHTOWER_NOTIFICATIONS_HOSTNAME=$HOSTNAME
      - WATCHTOWER_NOTIFICATION_URL=$WATCHTOWER_NOTIFICATION_URL
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --cleanup --no-startup-message --include-restarting --schedule "0 0 4 * * *"

  tsdproxy:
    image: almeidapaulopt/tsdproxy:latest
    container_name: tsdproxy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /mnt/docker/tsdproxydata:/data
    environment:
      - TSDPROXY_AUTHKEY=$TSFUNNEL_AUTHKEY
      - DOCKER_HOST=unix:///var/run/docker.sock
    restart: unless-stopped


  immich:
    container_name: immich
    image: ghcr.io/immich-app/immich-server:${IMMICH_VERSION:-release}
    devices:
      - /dev/dri:/dev/dri
    labels:
      tsdproxy.enable: "true"
      tsdproxy.name: "immich"
      tsdproxy.funnel: "true"
      tsdproxy.container_port: 2283
    volumes:
      # Do not edit the next line. If you want to change the media storage location on your system, edit the value of UPLOAD_LOCATION in the .env file
      - ${UPLOAD_LOCATION}:/data
      - /etc/localtime:/etc/localtime:ro
    env_file:
      - .env
    ports:
      - '2283:2283'
    depends_on:
      - redis
      - database
    restart: always
    networks:
      - local_net

  immich-machine-learning:
      container_name: immich_machine_learning
      # For hardware acceleration, add one of -[armnn, cuda, rocm, openvino, rknn] to the image tag.
      # Example tag: ${IMMICH_VERSION:-release}-cuda
      image: ghcr.io/immich-app/immich-machine-learning:${IMMICH_VERSION:-release}-openvino
      # extends: # uncomment this section for hardware acceleration - see https://docs.immich.app/features/ml-hardware-acceleration
      #   file: hwaccel.ml.yml
      #   service: cpu # set to one of [armnn, cuda, rocm, openvino, openvino-wsl, rknn] for accelerated inference - use the `-wsl` version for WSL2 where applicable
      volumes:
        - /mnt/docker/immich_machine_learning/cache:/cache
      env_file:
        - .env
      restart: always
      extends:
       file: hwaccel.ml.yml
       service: openvino
      networks:
        - local_net

  redis:
      container_name: immich_redis
      image: docker.io/valkey/valkey:8-bookworm@sha256:fea8b3e67b15729d4bb70589eb03367bab9ad1ee89c876f54327fc7c6e618571
      labels:
        com.centurylinklabs.watchtower.enable: false
      healthcheck:
        test: redis-cli ping || exit 1
      restart: always
      volumes:
        - /mnt/docker/redis:/data
      networks:
        - local_net

  database:
      container_name: immich_postgres
      image: ghcr.io/immich-app/postgres:14-vectorchord0.4.3-pgvectors0.2.0@sha256:41eacbe83eca995561fe43814fd4891e16e39632806253848efaf04d3c8a8b84
      labels:
        com.centurylinklabs.watchtower.enable: false
      environment:
        POSTGRES_PASSWORD: ${DB_PASSWORD}
        POSTGRES_USER: ${DB_USERNAME}
        POSTGRES_DB: ${DB_DATABASE_NAME}
        POSTGRES_INITDB_ARGS: '--data-checksums'
        # Uncomment the DB_STORAGE_TYPE: 'HDD' var if your database isn't stored on SSDs
        # DB_STORAGE_TYPE: 'HDD'
      volumes:
        # Do not edit the next line. If you want to change the database storage location on your system, edit the value of DB_DATA_LOCATION in the .env file
        - ${DB_DATA_LOCATION}:/var/lib/postgresql/data
      shm_size: 128mb
      restart: always
      networks:
        - local_net

networks:
  local_net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.19.0.0/24
